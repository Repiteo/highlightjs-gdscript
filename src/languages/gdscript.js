/*
Language: GDScript
Description: GDScript is a programming language for the Godot Engine.
Author: Thaddeus Crews <repiteo@outlook.com>
Website: https://docs.godotengine.org/en/stable/tutorials/scripting/gdscript/gdscript_basics.html
*/

export default function (hljs) {
	const KEYWORDS = [
		"and",
		"as",
		"await",
		"breakpoint",
		"class",
		"class_name",
		"const",
		"enum",
		"extends",
		"func",
		"get",
		"in",
		"is",
		"not",
		"or",
		"set",
		"signal",
		"static",
		"super",
		"var",
	];
	const KEYWORDS_CONTROL_FLOW = [
		"break",
		"continue",
		"elif",
		"else",
		"for",
		"if",
		"match",
		"pass",
		"return",
		"when",
		"while",
	];
	const LITERALS = ["true", "false", "null"];
	const BUILTINS = [
		// doc/classes/@GlobalScope.xml
		"abs",
		"absf",
		"absi",
		"acos",
		"asin",
		"atan",
		"atan2",
		"bezier_derivative",
		"bezier_interpolate",
		"bytes_to_var",
		"bytes_to_var_with_objects",
		"ceil",
		"ceilf",
		"ceili",
		"clamp",
		"clampf",
		"clampi",
		"cos",
		"cosh",
		"cubic_interpolate",
		"cubic_interpolate_angle",
		"cubic_interpolate_angle_in_time",
		"cubic_interpolate_in_time",
		"db_to_linear",
		"deg_to_rad",
		"ease",
		"error_string",
		"exp",
		"floor",
		"floorf",
		"floori",
		"fmod",
		"fposmod",
		"hash",
		"instance_from_id",
		"inverse_lerp",
		"is_equal_approx",
		"is_finite",
		"is_inf",
		"is_instance_id_valid",
		"is_instance_valid",
		"is_nan",
		"is_zero_approx",
		"lerp",
		"lerp_angle",
		"lerpf",
		"linear_to_db",
		"log",
		"max",
		"maxf",
		"maxi",
		"min",
		"minf",
		"mini",
		"move_toward",
		"nearest_po2",
		"pingpong",
		"posmod",
		"pow",
		"print",
		"print_rich",
		"print_verbose",
		"printerr",
		"printraw",
		"prints",
		"printt",
		"push_error",
		"push_warning",
		"rad_to_deg",
		"rand_from_seed",
		"randf",
		"randf_range",
		"randfn",
		"randi",
		"randi_range",
		"randomize",
		"remap",
		"rid_allocate_id",
		"rid_from_int64",
		"round",
		"roundf",
		"roundi",
		"seed",
		"sign",
		"signf",
		"signi",
		"sin",
		"sinh",
		"smoothstep",
		"snapped",
		"snappedf",
		"snappedi",
		"sqrt",
		"step_decimals",
		"str",
		"str_to_var",
		"tan",
		"tanh",
		"typeof",
		"var_to_bytes",
		"var_to_bytes_with_objects",
		"var_to_str",
		"weakref",
		"wrap",
		"wrapf",
		"wrapi",
		// modules/gdscript/doc_classes/@GDScript.xml
		"Color8",
		"assert",
		"char",
		"convert",
		"dict_to_inst",
		"get_stack",
		"inst_to_dict",
		"len",
		"load",
		"preload",
		"print_debug",
		"print_stack",
		"range",
		"str",
		"type_exists",
	];
	const TYPES = [
		"Variant",
		"bool",
		"int",
		"float",
		"String",
		"StringName",
		"NodePath",
		"Vector2",
		"Vector2i",
		"Rect2",
		"Rect2i",
		"Transform2D",
		"Vector3",
		"Vector3i",
		"AABB",
		"Plane",
		"Quaternion",
		"Basis",
		"Transform3D",
		"Color",
		"RID",
		"Object",
		"Dictionary",
		"Array",
		"PackedByteArray",
		"PackedInt32Array",
		"PackedInt64Array",
		"PackedFloat32Array",
		"PackedFloat64Array",
		"PackedStringArray",
		"PackedVector2Array",
		"PackedVector2iArray",
		"PackedVector3Array",
		"PackedVector3iArray",
		"PackedVector4Array",
		"PackedColorArray",
		"Nil",
		"void",
	];
	return {
		name: "GDScript",
		aliases: ["gd", "godot", "gdscript"],
		keywords: {
			keyword: KEYWORDS.concat(KEYWORDS_CONTROL_FLOW),
			literal: LITERALS,
			built_in: BUILTINS,
			types: TYPES,
		},
		contains: [
			hljs.QUOTE_STRING_MODE,
			hljs.HASH_COMMENT_MODE,
			hljs.NUMBER_MODE,
		],
	};
}
